name: sdk
run-name: Building Sdk Images
on:
  workflow_dispatch:
  workflow_run:
    workflows: ["rootfs"]
    types: [completed]

jobs:
  get-rootfs:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    environment: Main

    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - run: pip install .[dev]

      - name: Set curreny version value
        run: |
          echo Setting Version Var: $(python -c "from importlib.metadata import version;print(version('cartesapp'))")
          echo "cartesapp_version=$(python -c \"from importlib.metadata import version;print(version('cartesapp'))\")" >> "$GITHUB_ENV"
          echo Version: $cartesapp_version

      - name: Get workflow run ID
        id: get_run_id
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const workflowFileName = 'rootfs.yaml';
            const branch = '${{ github.head_ref || github.ref_name }} ';

            // Get workflow ID by filename
            const { data: workflow } = await github.rest.actions.getWorkflow({
              owner,
              repo,
              workflow_id: workflowFileName,
            });

            // List workflow runs for the specific workflow, ordered by creation date
            const { data: workflowRuns } = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: workflow.id,
              branch: branch,
              status: 'completed',
              per_page: 1,
            });

            if (workflowRuns.workflow_runs.length > 0) {
              const runId = workflowRuns.workflow_runs[0].id;
              console.log(`Found completed workflow run ID: ${runId}`);
              core.setOutput('completed_run_id', runId);
            } else {
              console.log('No completed workflow runs found for the specified workflow.');
              core.setOutput('completed_run_id', '');
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail if no rootfs
        if: ${{ steps.get_run_id.outputs.completed_run_id == '' }}
        run: exit 1

      - name: Download rootfs
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get_run_id.outputs.completed_run_id }}
          name: root.ext2
          path: ${{ runner.temp }}/rootfs

      - name: Upload rootfs
        uses: actions/upload-artifact@v4
        with:
          name: root.ext2
          path: ${{ runner.temp }}/rootfs/root.ext2
          if-no-files-found: error
          retention-days: 1

  build-sdk:
    runs-on: ubuntu-latest
    needs:
      - get-rootfs
    permissions:
      packages: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - name: Download rootfs
        uses: actions/download-artifact@v4
        with:
          name: root.ext2
          path: ${{ runner.temp }}/rootfs

      - name: Copy rootfs
        run: |
          mkdir -p .cartesi
          cp  ${{ runner.temp }}/rootfs/root.ext2 .cartesi/root.ext2
          ls -l .cartesi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Node Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=CartesApp Sdk
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.url=${{ github.repository }}

      - name: Node Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          tags: ghcr.io/${{ github.repository }}
          context: .cartesi
          labels: ${{ steps.meta.outputs.labels }}
          target: cartesapp-sdk
          file: .sdk/Dockerfile
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build-sdk
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Node Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{ env.cartesapp_version }},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=ref,event=branch,enable=${{ github.ref != format('refs/heads/{0}', 'main') }}
            type=sha
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=CartesApp Sdk
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.url=${{ github.repository }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'ghcr.io/${{ github.repository }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version }}
