name: sdk
run-name: Testing and Building Rootfs and Sdk Images
on:
  workflow_dispatch:

jobs:
  build-rootfs:
    runs-on: ubuntu-latest
    environment: Main

    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Install Cartesi Machine
        run: |
          curl -s -L https://edubart.github.io/linux-packages/apt/keys/cartesi-deb-key.gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/cartesi-deb-key.gpg

          # Add repository
          echo "deb https://edubart.github.io/linux-packages/apt stable/" | sudo tee /etc/apt/sources.list.d/cartesi-deb-apt.list

          # Update list of available packages
          sudo apt-get update

          # Install cartesi-machine
          sudo apt-get install -y cartesi-machine=${{ vars.EMULATOR_VERSION || '0.19.0-1' }} \
            cartesi-machine-linux-image=${{ vars.MACHINE_LINUX_VERSION || '0.20.0-1' }} \
            xgenext2fs=${{ vars.XGENEXT2_VERSION || '1.5.6-1' }}

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - run: pip install .[dev]

      - name: Test with Cartesapp
        run: |
          cartesapp test

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build rootfs
        run: |
          mkdir -p .cartesi
          docker build --platform=linux/riscv64 -f .rootfs/Dockerfile --output type=tar,dest=.cartesi/root.tar .
          cartesapp build --drives-only --config-file .rootfs/config.toml --log-level debug

      - name: Test with Cartesapp with cartesi machine
        run: |
          cartesapp test --cartesi-machine

  build-sdk:
    runs-on: ubuntu-latest
    needs:
      - build-rootfs
    permissions:
      packages: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Node Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=CartesApp Sdk
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.url=${{ github.repository }}

      - name: Node Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          tags: ghcr.io/${{ github.repository }}
          build-args: ROOTFS=.cartesi/root.ext2
          labels: ${{ steps.meta.outputs.labels }}
          target: cartesapp-sdk
          file: .sdk/Dockerfile
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests--${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build-sdk
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Node Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=ref,event=branch,enable=${{ github.ref != format('refs/heads/{0}', 'main') }}
            type=sha
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=CartesApp Sdk
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.url=${{ github.repository }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'ghcr.io/${{ github.repository }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version }}
