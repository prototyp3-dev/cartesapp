/* eslint-disable */
/**
 * This file was automatically generated by cartesapp.template_generator.
 * DO NOT MODIFY IT BY HAND. Instead, run the generator,
 */

import { hexToBigInt, isHex } from "viem";
import {
  type InputAdded,
  type Input as CartesiInput,
  type Report as CartesiReport,
  type Output as CartesiOutput,
} from "@cartesi/viem";
import Ajv from "ajv";
import addFormats from "ajv-formats";

import {
  genericAdvanceInput,
  genericInspect,
  type IOType,
  type Models,
  IOData,
  Input,
  Output,
  type MutationOptions,
  type QueryOptions,
  CONVENTIONAL_TYPES,
  decodeToConventionalTypes,
  type AdvanceResult,
  listAdvanceResults,
  OutputWithProof,
} from "../cartesapp/utils";
import { type InspectOptions, type InspectReport } from "../cartesapp/inspect";

{% if has_indexer_query -%}
import {
  genericGetOutputs,
  decodeAdvance,
  type DecodedIndexerOutput,
} from "../cartesapp/lib";

import * as indexerIfaces from "../indexer/ifaces.d"
{% endif -%}

import * as ifaces from "./ifaces.d";


/**
 * Configs
 */

const ajv = new Ajv();
addFormats(ajv);
ajv.addFormat("biginteger", (data) => {
  if (!isHex(data)) return false;
  const dataTovalidate = hexToBigInt(data);
  return typeof dataTovalidate == "bigint";
});
const MAX_SPLITTABLE_OUTPUT_SIZE = {{ MAX_SPLITTABLE_OUTPUT_SIZE }};

/*
 * Mutations/Advances
 */

{% for info in mutations_info -%}
export async function {{ convert_camel_case(info['method']) }}(
    inputData: ifaces.{{ convert_camel_case(info['model'].__name__,True) }},
    options:MutationOptions
): Promise<InputAdded[] | AdvanceResult[] | unknown[]> {
  const data: {{ convert_camel_case(info['model'].__name__,True) }} = new {{ convert_camel_case(info['model'].__name__,True) }}(inputData);
  {% if has_indexer_query -%}
  if (options?.decode) { options.sync = true; }
  const result = await genericAdvanceInput<ifaces.{{ convert_camel_case(info['model'].__name__,True) }}>(
    options,
    '{{ "0x"+info["selector"].to_bytes().hex() }}',
    data
  );
  if (options?.sync) {
    const advanceResults = await listAdvanceResults(
      {
        applicationAddress: options.applicationAddress,
        cartesiNodeUrl: options.cartesiNodeUrl,
      },
      result,
    );
    if (options?.decode) {
      return decodeAdvance(advanceResults, decodeToModel, options);
    }
    return advanceResults;
  }
  return result;
{% else -%}
  return await genericAdvanceInput<ifaces.{{ convert_camel_case(info['model'].__name__,True) }}>(
    options,
    '{{ "0x"+info["selector"].to_bytes().hex() }}',
    data
  );
{% endif -%}
}

{% endfor %}
/*
 * Queries/Inspects
 */

{% for info in queries_info -%}
export async function {{ convert_camel_case(info['method']) }}(
    inputData: ifaces.{{ convert_camel_case(info['model'].__name__,True) }},
    options?:QueryOptions
):Promise<InspectReport|any> {
  const selectorInfo = '{{ info["selector"] }}';
  {# return genericInspect<ifaces.{{ convert_camel_case(info['model'].__name__,True) }}>(data,selectorInfo,options); -#}
  {% if info["configs"].get("splittable_output") -%}
  let part:number = 0;
  let hasMoreParts:boolean = false;
  const output: InspectReport = {payload: "0x"}
  do {
    hasMoreParts = false;
    let inputDataSplittable = Object.assign({part},inputData);
    const data: {{ convert_camel_case(info['model'].__name__,True) }} = new {{ convert_camel_case(info['model'].__name__,True) }}(inputDataSplittable);
    const partOutput: InspectReport = await genericInspect<ifaces.{{ convert_camel_case(info['model'].__name__,True) }}>(data,selectorInfo,options);
    let payloadHex = partOutput.payload.substring(2);
    if (payloadHex.length/2 > MAX_SPLITTABLE_OUTPUT_SIZE) {
      part++;
        payloadHex = payloadHex.substring(0, payloadHex.length - 2);
          hasMoreParts = true;
      }
      output.payload += payloadHex;
  } while (hasMoreParts)
  {% else -%}
  const data: {{ convert_camel_case(info['model'].__name__,True) }} = new {{ convert_camel_case(info['model'].__name__,True) }}(inputData);
  const output: InspectReport =
    await genericInspect<ifaces.{{ convert_camel_case(info['model'].__name__,True) }}>(
      data,
      selectorInfo,
      options
    );
  {% endif -%}
  if (options?.decode) {
    return decodeToModel(output,options.decodeModel || "json");
  }
  return output;
}

{% endfor %}
{% if has_indexer_query -%}
/*
 * Indexer Query
 */

export async function getOutputs(
    inputData: indexerIfaces.IndexerPayload,
    options:InspectOptions
):Promise<DecodedIndexerOutput> {
    return genericGetOutputs(inputData,decodeToModel,options);
}
{% endif %}

/**
 * Models Decoders/Exporters
 */

export function decodeToModel(
  data: CartesiInput | CartesiOutput | CartesiReport | InspectReport,
  modelName: string
): any {
  if (modelName == undefined) throw new Error("undefined model");
  if (CONVENTIONAL_TYPES.includes(modelName)) {
    if ((data as CartesiOutput).decodedData)
      return decodeToConventionalTypes((data as CartesiOutput).decodedData.payload, modelName);
    return decodeToConventionalTypes(data.rawData, modelName);
  }
  const decoder = models[modelName].decoder;
  if (decoder == undefined) throw new Error("undefined decoder");
  return decoder(data);
}

export function exportToModel(data: any, modelName: string): string {
  const exporter = models[modelName].exporter;
  if (exporter == undefined) throw new Error("undefined exporter");
  return exporter(data);
}

{% for info in mutations_payload_info -%}
{% if info['model'] -%}
// Mutation {{ info['model'].__name__ }}
export class {{ convert_camel_case(info['model'].__name__,True) }}Input extends Input<ifaces.{{ convert_camel_case(info['model'].__name__,True) }}> {
  constructor(data: CartesiInput) {
    super(models['{{ info["model"].__name__ }}'],data{% if info.get('has_proxy') -%},true{% endif -%});
  }
}
export function decodeTo{{ convert_camel_case(info['model'].__name__,True) }}Input(
  data: CartesiInput | CartesiOutput | CartesiReport | InspectReport,
): {{ convert_camel_case(info['model'].__name__,True) }}Input {
  return new {{ convert_camel_case(info['model'].__name__,True) }}Input(data as CartesiInput);
}
export class {{ convert_camel_case(info['model'].__name__,True) }} extends IOData<ifaces.{{ convert_camel_case(info['model'].__name__,True) }}> {
  constructor(data: ifaces.{{ info["model"].__name__ }}, validate: boolean = true) {
    super(models['{{ info["model"].__name__ }}'],data,validate);
  }
}
export function exportTo{{ convert_camel_case(info['model'].__name__,True) }}(data: ifaces.{{ info["model"].__name__ }}): string {
  const dataToExport: {{ convert_camel_case(info['model'].__name__,True) }} = new {{ convert_camel_case(info['model'].__name__,True) }}(data);
  return dataToExport.export();
}

{% endif -%}

{% endfor -%}
{% for info in queries_payload_info -%}
{% if info['model'] -%}
// Query {{ info['model'].__name__ }}

// export class {{ convert_camel_case(info['model'].__name__,True) }}Input extends Input<ifaces.{{ convert_camel_case(info['model'].__name__,True) }}> {
//   constructor(data: CartesiInput) {
//     super(models['{{ info["model"].__name__ }}'],data);
//   }
// }
// export function decodeTo{{ convert_camel_case(info['model'].__name__,True) }}Input(
//   data: CartesiInput | CartesiOutput | CartesiReport | InspectReport
// ): {{ convert_camel_case(info['model'].__name__,True) }}Input {
//   return new {{ convert_camel_case(info['model'].__name__,True) }}Input(data as CartesiInput);
// }

export class {{ convert_camel_case(info['model'].__name__,True) }} extends IOData<ifaces.{{ convert_camel_case(info['model'].__name__,True) }}> {
  constructor(data: ifaces.{{ info["model"].__name__ }}, validate: boolean = true) {
    super(models['{{ info["model"].__name__ }}'],data,validate);
  }
}
export function exportTo{{ convert_camel_case(info['model'].__name__,True) }}(
  data: ifaces.{{ info["model"].__name__ }}
): string {
  const dataToExport: {{ convert_camel_case(info['model'].__name__,True) }} = new {{ convert_camel_case(info['model'].__name__,True) }}(data);
  return dataToExport.export();
}
{% endif -%}

{% endfor -%}
{% for info in reports_info -%}
// Report {{ info['class'] }}

export class {{ convert_camel_case(info['class'],True) }} extends Output<ifaces.{{ convert_camel_case(info['class'],True) }}> {
  constructor(output: CartesiReport | InspectReport) {
    super(models['{{ info["class"] }}'],output);
  }
}
export function decodeTo{{ convert_camel_case(info['class'],True) }}(
  output: CartesiInput | CartesiOutput | CartesiReport | InspectReport
): {{ convert_camel_case(info['class'],True) }} {
  return new {{ convert_camel_case(info['class'],True) }}(output as CartesiReport);
}

{% endfor -%}
{% for info in notices_info -%}
// Notice {{ info['class'] }}

export class {{ convert_camel_case(info['class'],True) }} extends OutputWithProof<ifaces.{{ convert_camel_case(info['class'],True) }}> {
  constructor(output: CartesiOutput) {
    super(models['{{ info["class"] }}'],output);
  }
}
export function decodeTo{{ convert_camel_case(info['class'],True) }}(
  output: CartesiInput | CartesiOutput | CartesiReport | InspectReport
): {{ convert_camel_case(info['class'],True) }} {
  return new {{ convert_camel_case(info['class'],True) }}(output as CartesiOutput);
}

{% endfor -%}
{% for info in vouchers_info -%}
// Voucher {{ info['class'] }}

export class {{ convert_camel_case(info['class'],True) }} extends OutputWithProof<ifaces.{{ convert_camel_case(info['class'],True) }}> {
  constructor(output: CartesiOutput) {
    super(models['{{ info["class"] }}'],output);
  }
}
export function decodeTo{{ convert_camel_case(info['class'],True) }}(
  output: CartesiInput | CartesiOutput | CartesiReport | InspectReport
): {{ convert_camel_case(info['class'],True) }} {
  return new {{ convert_camel_case(info['class'],True) }}(output as CartesiOutput);
}

{% endfor %}
/**
 * Model
 */

export const models: Models = {
  {% for info in mutations_payload_info -%}
  '{{ info["model"].__name__ }}': {
    ioType:"mutationPayload",
    abiTypes:{{ info['abi_types'] }},
    params:{{ list(info["model"].__fields__.keys()) }},
    decoder: decodeTo{{ convert_camel_case(info["model"].__name__,True) }}Input,
    exporter: exportTo{{ info["model"].__name__ }},
    validator: ajv.compile<ifaces.{{ info["model"].__name__ }}>(
      JSON.parse(
        '{{ info["model"].schema_json() }}'.replace(
          'integer',
          'string","format":"biginteger'
        )
      )
    )
  },
  {% endfor -%}
  {% for info in queries_payload_info -%}
  '{{ info["model"].__name__ }}': {
    ioType:"{{ info['query_type'] }}",
    abiTypes:{{ info['abi_types'] }},
    params:{{ list(info["model"].__fields__.keys()) }},
    // decoder: decodeTo{{ convert_camel_case(info["model"].__name__,True) }}Input,
    exporter: exportTo{{ info["model"].__name__ }},
    validator: ajv.compile<ifaces.{{ info["model"].__name__ }}>(
      JSON.parse(
        '{{ info["model"].schema_json() }}'
      )
    )
  },
  {% endfor -%}
  {% for info in reports_info -%}
  '{{ info["class"] }}': {
    ioType:"report",
    abiTypes:{{ info['abi_types'] }},
    params:{{ list(info["model"].__fields__.keys()) }},
    decoder: decodeTo{{ convert_camel_case(info['class'],True) }},
    validator: ajv.compile<ifaces.{{ convert_camel_case(info['class'],True) }}>(
      JSON.parse(
        '{{ info["model"].schema_json() }}'
      )
    )
  },
  {% endfor -%}
  {% for info in notices_info -%}
  '{{ info["class"] }}': {
    ioType:"{{ info['notice_type'] }}",
    abiTypes:{{ info['abi_types'] }},
    params:{{ list(info["model"].__fields__.keys()) }},
    decoder: decodeTo{{ convert_camel_case(info['class'],True) }},
    validator: ajv.compile<ifaces.{{ convert_camel_case(info['class'],True) }}>(
      JSON.parse(
        '{{ info["model"].schema_json() }}'.replace(
          /integer/g,
          'string","format":"biginteger'
        )
      )
    )
  },
  {% endfor -%}
  {% for info in vouchers_info -%}
  '{{ info["class"] }}': {
    ioType:"voucher",
    abiTypes:{{ info['abi_types'] }},
    params:{{ list(info["model"].__fields__.keys()) }},
    decoder: decodeTo{{ convert_camel_case(info['class'],True) }},
    validator: ajv.compile<ifaces.{{ convert_camel_case(info['class'],True) }}>(
      JSON.parse(
        '{{ info["model"].schema_json() }}'.replace(
          /integer/g,
          'string","format":"biginteger'
        )
      )
    )
  },
  {% endfor -%}
};
