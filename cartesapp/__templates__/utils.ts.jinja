/* eslint-disable */
/**
 * This file was automatically generated by cartesapp.template_generator.
 * DO NOT MODIFY IT BY HAND. Instead, run the generator,
 */
import "viem/window";
import { isHex, fromHex } from "viem";

import {
  anvil,
  mainnet,
  sepolia,
  cannon,
  base,
  baseSepolia,
  type Chain,
} from "viem/chains";
import { type RJSFSchema } from "@rjsf/utils";
import {
  type Input as CartesiInput,
  type Report as CartesiReport,
  type Output as CartesiOutput,
} from "@cartesi/viem";
import { BasicIO, type MutationOptions, type QueryOptions } from "./{{base_dir}}/cartesapp/utils";
import { type InspectOptions, type InspectReport } from "./{{base_dir}}/cartesapp/inspect";

{% if add_indexer_query -%}
import * as indexerIfaces from "./{{base_dir}}/indexer/ifaces.d";
import { type DecodedIndexerOutput } from "./{{base_dir}}/cartesapp/lib";
{% endif -%}

//
// Models
//
interface FunctionInfo<T> {
  method(
    i: T,
    o: QueryOptions | MutationOptions,
  ): Promise<InspectReport | unknown>;
  schema: RJSFSchema;
}
export interface ListFunctionInfo {
  [key: string]: FunctionInfo<unknown>;
}

interface DecoderMethod<T extends object> {
  method(
    o: CartesiInput | CartesiOutput | CartesiReport | InspectReport,
  ): BasicIO<T>;
}
export interface DecoderMethods {
  [key: string]: DecoderMethod<object>;
}

{% if add_indexer_query -%}
interface GetOutputsMethod {
  method(
    i: indexerIfaces.IndexerPayload,
    o: InspectOptions,
  ): Promise<DecodedIndexerOutput>;
}
export interface GetOutputsMethods {
  [key: string]: GetOutputsMethod;
}
{% endif -%}

export interface INodeComponentProps {
  appAddress: `0x${string}`;
  chain: number;
  nodeAddress: string;
}

export const chains: Record<number, Chain> = {};
chains[anvil.id] = anvil;
chains[cannon.id] = cannon;
chains[sepolia.id] = sepolia;
chains[baseSepolia.id] = baseSepolia;
chains[mainnet.id] = mainnet;
chains[base.id] = base;

export function getChain(chainId: number): Chain | null;
export function getChain(chainId: string): Chain | null;
export function getChain(chainId: number | string): Chain | null {
  if (typeof chainId === "string") {
    if (!isHex(chainId)) return null;
    chainId = fromHex(chainId, "number");
  }

  const chain = chains[chainId];
  if (!chain) return null;

  return chain;
}
