/**
 * This file was automatically generated by cartesapp.template_generator.
 * DO NOT MODIFY IT BY HAND. Instead, run the generator,
 */
import React, { useState } from "react";

import Form from "@rjsf/core";
import validator from "@rjsf/validator-ajv8";

import {
  type INodeComponentProps,
  type ListFunctionInfo,
  {% if add_indexer_query -%}type GetOutputsMethods,{% endif %}
} from "./utils";

{% for mod in all_modules.keys() -%}
import {
  {% for info in all_modules[mod]['queries_info'] -%}
  {{convert_camel_case(info['method'])}} as {{mod}}{{convert_camel_case(info['method'],True)}},
  {% endfor -%}
  {% if all_modules[mod]['has_indexer_query'] -%}getOutputs as {{mod}}GetOutputs,{% endif -%}
} from "./{{base_dir}}/{{mod}}/lib";
{% endfor -%}
{% if add_indexer_query -%}
// Indexer specific
import * as indexerIfaces from "./{{base_dir}}/indexer/ifaces.d";
{% endif %}
const funcInfos: ListFunctionInfo = {
  {% for mod in all_modules.keys() -%}
  {% for info in all_modules[mod]['queries_info'] -%}
  "{{mod}}.{{convert_camel_case(info['method'])}}": {
    method: {{mod}}{{convert_camel_case(info['method'],True)}},
    schema: JSON.parse(
      '{{ info["model"].schema_json() }}',
    ),
  },
  {% endfor -%}
  {% endfor %}
};

{% if add_indexer_query -%}
const getOutputsMethods: GetOutputsMethods = {
  {% for mod in all_modules.keys() -%}
  {% if all_modules[mod]['has_indexer_query'] -%}
  {{mod}}: { method: {{mod}}GetOutputs },
  {% endif -%}
  {% endfor %}
};
{% endif %}

export const Inspect: React.FC<INodeComponentProps> = (props) => {
  const [selectedMethod, setSelectedMethod] = useState<string>("");
  const [result, setResult] = useState<string>();

  {% if add_indexer_query %}
  const [selectedGetOutputsModule, setSelectedGetOutputsModule] =
    useState<string>("");
  const [indexerResult, setIndexerResult] = useState<string>();
  async function queryIndexer(data: indexerIfaces.IndexerPayload) {
    setIndexerResult(undefined);
    if (!getOutputsMethods[selectedGetOutputsModule]) return;
    data.module = selectedGetOutputsModule;
    const ret = await getOutputsMethods[selectedGetOutputsModule].method(data, {
      applicationAddress: props.appAddress,
      cartesiNodeUrl: props.nodeAddress,
    });
    setIndexerResult(
      JSON.stringify(ret, (_, value) =>
        typeof value === "bigint" ? value.toString() + "n" : value,
        2
      ),
    );
  }
  {% endif %}
  async function query(data: unknown) {
    setResult(undefined);
    if (!funcInfos[selectedMethod]) return;
    const ret = await funcInfos[selectedMethod].method(data, {
      applicationAddress: props.appAddress,
      cartesiNodeUrl: props.nodeAddress,
      decode: true,
    });
    setResult(
      JSON.stringify(ret, (_, value) =>
        typeof value === "bigint" ? value.toString() + "n" : value,
        2
      ),
    );
  }

  return (
    <div>
      <div>
        <h4>Select query</h4>
        <select onChange={(e) => setSelectedMethod(e.target.value)}>
          <option value={""}>-</option>
          {Object.keys(funcInfos).map((func, index) => (
            <option key={index} value={func}>
              {func}
            </option>
          ))}
        </select>
        {selectedMethod ? (
          <>
            <Form
              schema={funcInfos[selectedMethod]?.schema || {}}
              validator={validator}
              // onChange={log('changed')}
              onSubmit={({ formData }) => query(formData)}
              // onError={log("errors")}
            />
            <div>
              Result <br />
              <p style={ { whiteSpace: "pre-wrap" } }>{result}</p>
            </div>
          </>
        ) : (
          <></>
        )}
      </div>

      {% if add_indexer_query -%}
      <br />
      <div>
        <h4>Select get outputs module</h4>
        <select onChange={(e) => setSelectedGetOutputsModule(e.target.value)}>
          <option value={""}>-</option>
          {Object.keys(getOutputsMethods).map((func, index) => (
            <option key={index} value={func}>
              {func}
            </option>
          ))}
        </select>
        {selectedGetOutputsModule ? (
          <>
            <Form
              schema={funcInfos["indexer.indexerQuery"]?.schema || {}}
              validator={validator}
              // onChange={log('changed')}
              onSubmit={({ formData }) => queryIndexer(formData)}
              // onError={log("errors")}
            />
            <div>
              Indexer Result <br />
              <p style={ { whiteSpace: "pre-wrap" } }>{indexerResult}</p>
            </div>
          </>
        ) : (
          <></>
        )}
      </div>
      {% endif -%}
    </div>
  );
};
